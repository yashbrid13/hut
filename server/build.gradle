plugins {
    id 'java-library'
    id 'eclipse'
}
archivesBaseName = 'someJar'
version = '1.0-SNAPSHOT'
sourceSets.main.java.srcDirs = ['src']

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    implementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    implementation 'log4j:log4j:1.2.17'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.rabbitmq:amqp-client:5.16.0'
    implementation 'org.mongodb:mongodb-driver:3.12.12'
    implementation 'uk.com.robust-it:cloning:1.9.12'
    implementation 'org.objenesis:objenesis:3.2'
    testImplementation 'junit:junit:4.13.2'
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

//Task to generate .jar file of the project
task genJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
        	'Implementation-Version': version,
        	'Main-Class': 'server.Simulator'
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//Task to copy generated .jar file from build/libs to root dir so it can access server.json
task copyFromLibs (dependsOn: genJar, type: Copy) {
    from "build/libs"
    into "."
    include "*.jar"
}

//Task to execute the .jar file and get the server running
task runServer (dependsOn: copyFromLibs, type: JavaExec) {
    classpath = files('server-all-1.0-SNAPSHOT.jar')
    classpath += sourceSets.main.runtimeClasspath
    main = "server.Simulator"
}